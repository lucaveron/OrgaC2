------ Ejercicio 1

En un sistema similar al que implementamos en los talleres del curso (modo protegido con paginación activada), se tienen 5 tareas en ejecución. 
Todas las tareas realizan una cuenta que, al finalizarla, dejan el resultado en EAX. Se desea agregar al sistema una syscall para que las tareas puedan notificar al Kernel que 
terminaron (y que se marque internamente con un flag a dicha tarea). Luego, cuando el Kernel reciba el aviso de las 5 tareas, 
ejecutará una sexta que procesa los resultados (no nos interesa cómo. Por ejemplo; podría sumarlos) y escribe el nuevo resultado final en el EAX de cada tarea.
Cuando una tarea avisa que finalizó, no se le otorgará más tiempo de CPU hasta que la sexta tarea que procesa los datos no haya completado su trabajo.
Cuando eso ocurra, se retomará la ejecución de las 5 tareas y el ciclo se repetirá indefinidamente.

A) Definir o modificar las estructuras de sistema necesarias para que dicho servicio pueda ser invocado.
B) Implementar la syscall que llamarán las tareas.
C) Dar el pseudo-código de la tarea que procesa resultados.
D) Mostrar un pseudo-código de la función sched_next_task para que funcione de acuerdo a las necesidades de este sistema.


a) Primero partamos de la base que ya estan definidas todas las estructuras necesarias para que las 6 tareas funciones, con sus entradas en la gdt para su codigo y sus tss 
correspondientres.
Teniendo todo esto claro ahora deberiamos agregar una enetrada en la idt que se corresponde con la rutina de atencion para la interrupcion dada por la syscall, Esto lo hacemos
para poder apuntar a una nueva entrada en la gdt donde tengamos la informacion de la rutina dde atencion dicha, el descriptor de la idt tendra dpl = 3 para poder ser llamada
desde las tareas mientras que el dpl del descriptor de la gdt sera 0.
Ademas todavia no poseemos una funcion para inicialice estructuras de paginacion para datos y codigos de tareas de nivel 0 por lo que habria que haver una funcion que 
inicialice directorio para una tarea con paginas de codigo y datos de una tarea nivel 0.
Una vez dicho esto podemos crear la entrada numero 37 en la idt que se corresponderia con esta syscall, apuntaria al descriptor de la gdt que apuntaria a la rutina de atencion
de esta nueva tarea

La idea de esta tarea 6 es que arranque pausada, y cuando se la vaya llamando vaya guardando el resultado de esa tarea, la deshabilite y szalte a la siguiente.
Asi cuanto todas las tareas l allamaron, estaran todas deshabilitadas y es ahi cuando se habilita y se salta a la tarea 6 para que pueda ejecutar su rutina, guardar los valores
en las tss de cada tarea, habilitar todas las tarteas y continuar la ejecucon normal del scheduler completamente

b)

global isr114
    _isr114:
    pushad ; necesitamos preservar los registros de la tarea llamadora porque luego va a seguir su ejecucion

    call sched_disable_current_task() ; funcion que deshabilita la current task
    call sched_next_task

    mov [sched_task_selector], ax
    jmp far [sched_task_offset]


    popad ; devolvemos a la tarea llamadora el contexto
    iret

c)

Ademas habria que cambiar la sched_next_task() para que ejecute la tarea 6 cuando ya todas la llamaron



void tarea_6() {

    uint32_t resultado_cuenta = 0;

    for(int i = 0; i < 5 ; i++) {
        resultado_cuenta += tss_tasks[i].eax
    }

    for(int i = 0; i < 5 ; i++) {
        tss_tasks[i].eax = resultado_cuenta
        sched_tasks[i].state = 'RUNNABLE'
    }

    sched_disable_current_task() ; funcion para deshbailitar tarea 6
}


uint16_t sched_next_task(void) {

    //sie stamos en la 6,dejamos que siga la 6
    if (current_task == 5 && sched_tasks[current_task].state != TASK_PAUSED ){
        return sched_tasks[5].selector
    }

    int estanPaused = 1;
    for(int i = 0; i < 5){
        if (sched_tasks[i].state == 'RUNNABLE'){
            estanPaused = 0;
            break;
        }
    }

    if (estanPaused){
        return sched_tasks[5].selector; // devuelvo tarea 6 para que se ejecute.
    }

    si no es ningun caso, busco la siguiente como siempre

  // Buscamos la próxima tarea viva (comenzando en la actual)
  int8_t i;
  for (i = (current_task + 1); (i % MAX_TASKS) != current_task; i++) {
    // Si esta tarea está disponible la ejecutamos
    if (sched_tasks[i % MAX_TASKS].state == TASK_RUNNABLE) {
      break;
    }
  } // loopea por todas las tareas hasta encontrar la primera que tenga el estado TASK_RUNNABLE (se puede correr creo)

  // Ajustamos i para que esté entre 0 y MAX_TASKS-1
  i = i % MAX_TASKS;

  // Si la tarea que encontramos es ejecutable entonces vamos a correrla.
  if (sched_tasks[i].state == TASK_RUNNABLE) {
    current_task = i;
    return sched_tasks[i].selector;
  }

  // En el peor de los casos no hay ninguna tarea viva. Usemos la idle como
  // selector.
  return GDT_IDX_TASK_IDLE << 3;
}

A) Para poder implementar esta funcionalidad, habría que agregar una entrada más en la IDT (en la posicion 114, por ej), que apunte a un descriptor en la gdt, 
que a su vez apunte a la rutina de atención de esta nueva syscall. 
    En la gdt, además de los descriptores de datos y codigo de nivel 0 y 3, contariamos también con 6 descriptores, cada uno correspondiente al TSS de una tarea.

    La idea es que cuando una tarea haya terminado de realizar la cuenta, utilice la syscall. La syscall deshabilitará la tarea, y llamará a sched_next_task para ver 
cuál es la siguiente que debe ser ejecutada. En caso de que todas las tareas [1, 5] hayan sido deshabilitadas, entonces sched_next_task habilitará la tarea 6 y la devolverá
como la próxima tarea a ejecutar. La tarea 6 tomará las cuentas de las TSS de las otras tareas, y una vez que termine de procesarlas, va a modificar las TSS para guardarles
el resultado donde corresponda, va a habilitar a todas las tareas en el scheduler de vuelta, y se va a deshabilitar a sí misma (la tarea 6 puede realizar estas acciones 
porque corre con nivel de privilegio 0).

    Para que la tarea 6 no sea llamada hasta que las 5 anteriores hayan finalizado, la misma arrancaria pausada.

B) 

global _isr114

_isr114:
    pushad

    call sched_disable_current  ; Deshablita tarea actual
    call sched_next_task 

    ; No hace falta chequear que sched_next_task devuelva la misma tarea, ya que la estamos deshabilitando antes
    ; Asumimos tambien que las tareas no pueden tener un selector nulo

    mov word [sched_task_selector], ax ; si no es nula, cambia el selector para apuntar a la nueva tarea
    jmp far [sched_task_offset] ; hace el jmp far para que se haga el cambio de tarea y por ende de contexto

    popad 
    iret

D) Por como estamos definiendo la isr, vamos a necesitar modificar sched_next_task para que en caso de que no haya ninguna tarea disponible, devuelva la 6.

uint16_t sched_next_task(void) {

    // Para evitar problemas de desincronización, si la tarea 6 se está corriendo al caer el clock, que siga corriendo hasta terminar
    if(current_task = 5)
        return sched_tasks[5].selector

    // Contar cantidad de tareas pausadas
    uint8_t estanTodasPausadas = 1;
    
    for(int i = 0; i < 5; i++) {
        if(sched_tasks[i].state != 'PAUSED')
            estanTodasPausadas = 0;
    }

    // Si las 5 primeras están pausadas, devolver tarea 6
    if(estanTodasPausadas){
        current_task = 5;
        return sched_tasks[5].selector; 
    }

    // Si no, devolver proxima tarea
    {... codigo del sched original}

}

C) La tarea 6 se vería así

void tarea_6() {

    // Buscamos resultados de otras tareas
    uint32_t resultados_cuentas[5];
    for(int i = 0; i < 5; i++) {
        resultados_cuentas[i] = tss_tasks[i].eax;
    }

    // Procesamos resultados
    uint32_t resultado_final = {... procesamiento de resultados};

    // Mandarlo a la tss de cada una de las tareas y habilitarlas
    for(int i = 0; i < 5; i++) {
        tss_tasks[i].eax = resultado_final;
        // habilitar tareas en el sched
        sched_tasks[i].state = TASK_RUNNABLE;
    }

    // Deshabilitar tarea
    sched_disable_current();
    // seria en asm, la idea es cederle el tiempo de ejecucion restante a la tarea 1 
    jmp_far_tarea_1();
}

------ Ejercicio 2

Se desea implementar una modificación sobre un kernel como el de los talleres: en el momento de desalojar una tarea, 
se deben escribir a disco todas las páginas de dicha tarea que hayan sido modificadas mientras la tarea corría.
Se les pide que hagan una función que, dado el CR3 de la tarea a desalojar, devuelva un arreglo de direcciones virtuales con las páginas 
que deben ser escritas a disco para esta nueva funcionalidad.
vaddr_t* paginas_modificadas(int32_t cr3) {
    //accedemos al page_directory de la tarea
    pd_entry_t* pd_base =  CR3_TO_PAGE_DIR(cr3);
    uint32_t cantidad_paginas_modificadas = 0;
    vaddr_t* array_paginas_modificadas[cantidad_paginas_modificadas];
    uint32_t index = 0;

    for(int i = 0; i < 1024 ; i++){
        pd_entry_t pd = pd_base[i];
        if (pd.attrs & MMU_P){
            pt_entry_t* pt_base = (pd.pt << 12);

            for (int j = 0; j < 1024 ; j++){
                pt_entry_t pt = pt_base[j];
                if (pt.attrs & MMU_P && pt.page & MMU_D){
                    array_paginas_modificadas[index] = (i << 22 | j << 12); //esta sera la direccion virtual pues para hallarla luego usariamos el offset de 32-22 para la entrada en el pdirectory, el offset 22-12 para la entrada en la page_table
                    index++;
                }
            }
        }
    }


    return array_paginas_modificadas;

}

vaddr_t* paginas_modificadas(int32_t cr3) {

    pd = page_directory_from_cr3(cr3);
    vaddr_t* array_paginas_modificadas[cantidad_paginas_modificadas(cr3)];  
    uint32 index = 0;

    for(int i = 0; i < 1024; i++) {
        if(pd[i] tiene el bit present) {
            for(int j = 0; j < 1024; j++) {
                if(pd[i].pt[j] tiene el bit de present y de dirty) {
                    // i es el offset que tenemos en el page directory, j es el offset en la page table
                    array_paginas_modificadas[index] = i << 22 + j << 12; // no hay offset fisico (no? "Ed confirmame a la brevedad pls" -Luca)
                    index++;
                }
            }
        }
    }
    return array_paginas_modificadas;
}

uint_32_t cantidad_paginas_modificadas(int32_t cr3) {

    pd = page_directory_from_cr3(cr3);
    uint_32_t cantidad_paginas_modificadas = 0;

    for(int i = 0; i < 1024; i++) {
        if(pd[i] tiene el bit present) {
            for(int j = 0; j < 1024; j++) {
                if(pd[i].pt[j] tiene el bit de present y de dirty) {
                    cantidad_paginas_modificadas++;
                }
            }
        }
    }
    return cantidad_paginas_modificadas; 
}


------ Ejercicio 1

En un sistema similar al que implementamos en los talleres del curso (modo protegido con paginación activada), 
se necesita implementar una llamada al sistema que permita crear una tarea idéntica a la tarea que invocó la llamada. 
El contexto y el mapa de memoria de la nueva tarea, se explicará a continuación.

A) Modificar las estructuras del sistema necesarias para que todas las tareas puedan invocar a esta nueva syscall. 
Indique las modificaciones que introduciría, y en qué archivos del sistema implementado en los talleres las harían.
B) Implementar la rutina correspondiente a dicha syscall de manera que:
    1) Se genere una nueva tarea cuyo contexto inicial sea una copia del último contexto almacenado de la tarea actual 
y que pueda ser ejecutada en algún momento por el sistema.
    2) Se realicen los mismos mapeos para código, datos y pila en todos los niveles (kernel y usuario), 
con la diferencia que las páginas de datos y pila de usuario quedarán en sólo lectura. 
Explique primero el algoritmo con sus palabras y luego codifíquelo. Recuerde que cada tarea debe tener mapeado al kernel 
con mapeo identidad y además, que cada tarea deberá tener su propia copia física de la pila de nivel 0. Suponga que la pila de nivel 0 de
cada tarea ocupa una única página en el área del kernel.
C) Expliquen con sus palabras un mecanismo que permita generar una copia física de la página cuando se intente escribir en las páginas de datos 
y/o las de pila de nivel de usuario de la nueva tarea. La nueva página debe permitir las escrituras. 

Para obtener nuevas páginas físicas del nivel correspondiente, puede usar las rutinas del taller: mmu_next_free_kernel_page y mmu_next_free_user_page. 
Además de estas funciones, puede usar cualquier función definida en el taller como parte de la solución.

A) Para implementar esta nueva funcionalidad, además de las TSS de las tareas ya existentes, y los descriptores en la gdt, hay que modificar: 
    - Las tss de las tareas. Se les agregaría un nuevo campo que indicaría en qué direccion física se encuentra su código. Como al crear una tarea en el archivo tasks.c,
se sabe en qué dirección física comienza su código, esta dirección puede ser mandada a la función tss_create_user_task para que la guarde en la tss.
    - Ademas agregariamos una entrada en la idt correspondiente a la rutina de atencion de la syscall a crear. Esta tendría dpl = 3 ya que seria una syscall llamada desde otras tareas.
La entrada en la idt apuntaria a un descriptor en la gdt correspondiente al codigo de la rutina de atencion para la syscall (dpl = 0). 

B) El funcionamiento de la syscall sería de la siguiente manera:
    1) Una tarea 1 utiliza la syscall
    2) Utilizando la TSS de la tarea 1, ubicamos el comienzo de sus dos páginas de código
    3) Utilizando las funciones mmu_next_free_user_page() y copy_page(), pedimos dos páginas para el código de la nueva tarea (llamemosla 2), y las copiamos 
       en el segmento de memoria correspondiente a la tarea 2
    4) Utilizando la función create_task, y mandandole la nueva direccion obtenida (que posee el codigo de la tarea), creamos la nueva tarea 2, le iniciamos 
    el esquema de paginación, y le creamos la tss
    5) Modificamos la tss de la tarea 2, copiando la tss de la tarea 1, poniendo el eip en el lugar donde arranca el código, y manteniendo el cr3 que ya tenía

global isr222
    _isr222:
    pushad
    call mapear_codigo_nueva_tarea
    popad ; vuelve a la tarea llamadora sin ningun cambio
    iret
    
void mapear_codigo_nueva_tarea(){
    // Buscamos inicio de codigo
    tss_t tss_tarea_actual = tss_tasks[current_task] ; 
    paddr_t code_start = tss_tarea_actual.code_start;

    // Copiamos las dos páginas de código
    paddr_t inicio_pagina_codigo = mmu_next_free_user_page();
    copy_page(inicio_pagina_codigo, code_start);
    copy_page(mmu_next_free_user_page(), code_start + PAGE_SIZE);

    // Creamos la nueva tarea con la ubicación de su código
    int8_t new_task_id = create_task(0, inicio_pagina_codigo); // Modificada para que reciba el inicio del código
    
    copiarTSS(new_task_id, current_task);  // Funcion que copia la tss, reinicia el eip al inicio del código y NO TOCA el cr3, ni el EBP/ESP de ningun nivel :thumbs_up:
}

NOTA:
    - Dentro de create_task, se llama a tss_create_user_task, que llama a mmu_init_task_dir. Esta ultima mapea las páginas del stack como read/write, cuando el enunciado
pide que el stack sea solo lectura. Esto debería tenerse en cuenta, y crear una función aparte, o agregarle un parámetro para decidir si el stack es escribible o no, etc etc.

C) Al intentar escribir en una pagina de solo lectura, va a saltar una excepción. En la rutina de atención, se debería pedir una nueva pagina, copiar la pagina en la que se
intentó escribir, y mapearla en la posicion de la pagina original. 


